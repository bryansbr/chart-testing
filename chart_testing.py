# -*- coding: utf-8 -*-
"""chart_testing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BVOwnu24LtGAvOO25pMhN_3AlRg-j6Ce

<div align="center">
    <h1><strong>Reto personal:</strong> Camina y graudate</h1>
</div>

![](https://raw.githubusercontent.com/bryansbr/chart-testing/main/Walk.png)

<br>

<div align="center">
    <h3>BRYAN STEVEN BIOJÓ ROMERO</h3>
    <h3>201629366</h3>
    <h3>Facultad de Ingeniería</h3>
    <h3>UNIVERSIDAD DEL VALLE</h3>
    <h3>Periodo 2023B</h3>
</div><br>

<div align="center">
    <h6>RETO EAA / ESTRATEGIAS PARA EL APRENDIZAJE AUTÓNOMO</h6>
</div>

# 1. Descripción
Este reto se dividió en dos (2) partes que fueron **Terminar mi anteproyecto de grado** y **Caminar diariamente**. Así mismo, estas partes se subdividieron de la siguiente manera:

#1.1. Anteproyecto
- **Estrategia aplicada:** Se utilizó como técnica *Divide y vencerás* con el objetivo de completar algunos de los apartados faltantes de mi Anteproyecto de grado y dejarlo listo para revisión por parte de mi asesor. El trabajo se titula "APLICACIÓN WEB PARA LA GESTIÓN DE VACACIONES DE FUNCIONARIOS DE LA UNIVERSIDAD DEL VALLE". El avance actual se estimaba en ese momento en un 50%.

- **Actividades:** Se plantearon las siguientes cuatro (4) actividades:
  - **Actividad 1:** Del 9 al 13 de octubre, trabajar durante 2 horas diarias en el desarrollo del *Estado del Arte*.
  - **Actividad 2:** Del 16 al 20 de octubre, a partir de las 7 p.m, trabajar durante 1 hora diaria en el desarrollo del *Marco Teórico* y la *Metodología*.
  - **Actividad 3:** Del 23 al 27 de octubre, a partir de las 7 p.m, trabajar durante 1 hora diaria en el *Presupuesto* y la *Bibliografía*.
  - **Actividad 4:** El 28 de octubre, llevar a cabo la inspección final del documento y realizar los ajustes necesarios para darlo por completado y someterlo a revisión.

## 1.2. Caminatas
- **Estrategia aplicada:** Se utilizó como técnica *Hacer ejercicio para tener salud y vitalidad*. Para ser productivo, era importante tener un equilibrio entre mente y cuerpo. Esto al final se traduciría en una mejor actitud y autoestima.

- **Actividades:** Se plantearon las siguientes cuatro (4) actividades:
    - **Actividad 1:** A partir del 9 de octubre, caminar durante 21 días a partir de las 8:30 p.m. por 45 minutos.

<br>

**Nota:** Cada parte del reto está explicada en el siguiente notebook, el cual tiene asociado el repositorio donde se alojó la información **(GitHub)**, así como una representación e interpretación gráfica de los datos utilizando el lenguaje de programación **(Python)** y sus respectivas librerías.

# 2. Resultados obtenidos

## 2.1. Anteproyecto

### 2.1 Importación de librerías
"""

import pandas as pd
import matplotlib.pyplot as plt
from ipywidgets import interact

"""### 2.1.2 Carga y lectura de datos desde GitHub
Los datos se almacenarón en formatos CSV para una lectura y manipulación más eficiente.
"""

# Datos de actividad 1
antproyecto_a1_csv = 'https://raw.githubusercontent.com/bryansbr/chart-testing/main/csv/data_anteproyecto_a1.csv'
data_a1 = pd.read_csv(antproyecto_a1_csv)

# Datos de actividad 2
antproyecto_a2_csv = 'https://raw.githubusercontent.com/bryansbr/chart-testing/main/csv/data_anteproyecto_a2.csv'
data_a2 = pd.read_csv(antproyecto_a2_csv)

# Datos de actividad 3
antproyecto_a3_csv = 'https://raw.githubusercontent.com/bryansbr/chart-testing/main/csv/data_anteproyecto_a3.csv'
data_a3 = pd.read_csv(antproyecto_a3_csv)

# Datos de actividad 4
antproyecto_a4_csv = 'https://raw.githubusercontent.com/bryansbr/chart-testing/main/csv/data_anteproyecto_a4.csv'
data_a4 = pd.read_csv(antproyecto_a4_csv)

"""### 2.1.3 Limpieza de datos
Aquí se realiza la limpieza de los datos, eliminando aquellos que sean nulos.
"""

# Limpieza de datos de actividad 1
data_a1 = data_a1.dropna(subset=[
    'Fecha',
    'Minutos trabajados',
    'Commits',
    'Porcentaje de cumplimiento real'
])

# Limpieza de datos de actividad 2
data_a2 = data_a2.dropna(subset=[
    'Fecha',
    'Minutos trabajados',
    'Commits',
    'Porcentaje de cumplimiento real'
])

# Limpieza de datos de actividad 3
data_a3 = data_a3.dropna(subset=[
    'Fecha',
    'Minutos trabajados',
    'Commits',
    'Porcentaje de cumplimiento real'
])

# Limpieza de datos de actividad 4
data_a4 = data_a4.dropna(subset=[
    'Fecha',
    'Minutos trabajados',
    'Commits',
    'Porcentaje de cumplimiento'
])

"""### 2.1.4 Formateo de fechas
Dado que las fechas se encuentran el formato *mm-dd-yyyy*, se pasan a *dd-mm* para una mejor interpretación de los gráficos.
"""

# Formateo de fechas de actividad 1
data_a1['Fecha_formateada'] = pd.to_datetime(data_a1['Fecha']).dt.strftime('%d-%b')

# Formateo de fechas de actividad 2
data_a2['Fecha_formateada'] = pd.to_datetime(data_a2['Fecha']).dt.strftime('%d-%b')

# Formateo de fechas de actividad 3
data_a3['Fecha_formateada'] = pd.to_datetime(data_a3['Fecha']).dt.strftime('%d-%b')

# Formateo de fechas de actividad 4
data_a4['Fecha_formateada'] = pd.to_datetime(data_a4['Fecha']).dt.strftime('%d-%b')

"""### 2.1.5 Visualización parcial de los datos
Para un mejor entendimiento, se presenta una visualización parcial de los datos extraídos de GitHub.
"""

# Visualización de datos de actividad 1
data_a1.head()

# Visualización de datos de actividad 2
data_a2.head()

# Visualización de datos de actividad 3
data_a3.head()

# Visualización de datos de actividad 4
data_a4.head()

"""### 2.1.6. Gráficos
Para la realización de los gráficos, se excluyen las siguientes columnas:

- **Porcentaje de cumplimiento:** Este dato representa el porcentaje de cumplimiento de la actividad por día. Se calcula dividiendo los valores de la columna *Minutos trabajados* entre 120 minutos (para la primera actividad) y 60 minutos (para la segunda, tercera y actividad). No obstante, esta métrica puede no ser completamente precisa, ya que si se supera el tiempo mínimo, comenzará a mostrar valores de cumplimiento por encima del 100%, lo que podría afectar los resultados finales. En su lugar, se utiliza la columna *Porcentaje de cumplimiento real*, que toma el valor mínimo entre el porcentaje calculado y el 100%, lo que ajusta el cumplimiento a un máximo del 100%.

  - **Nota:** Para la actividad 4, aunque aparecen registrados los minutos trabajados, no se tienen en cuenta para determinar el porcentaje de cumplimiento por no estar contemplados en la definición inicial.

#### 2.1.6.1. Minutos trabajados
A continuación, se presenta el gráfico de la cantidad de minutos trabajados para cada actividad. También se tiene la opción de visualizar la media, la cual se puede desactivar a través del checkbox en la parte de arriba.

**Nota:** Los datos fueron extraídos del repositorio de *GitHub*, tomando los minutos de los primeros y últimos commits por cada día.
"""

def plot_data(show_mean_total=True):
    total_minutos_trabj = data_a1['Minutos trabajados'].sum()
    plt.figure(figsize=(11, 5))
    bars = plt.bar(data_a1['Fecha_formateada'], data_a1['Minutos trabajados'], label='Minutos trabajados', color='green')

    if show_mean_total:
        media_minutos_trabj = data_a1['Minutos trabajados'].mean()
        plt.axhline(y=media_minutos_trabj, color='blue', linestyle='--', label=f'Media ({int(media_minutos_trabj)})')

    plt.xlabel('Fechas')
    plt.ylabel('Minutos')
    plt.title(f'Minutos trabajados - Actividad 1 (Total: {total_minutos_trabj})', pad=20)
    plt.xticks(rotation=45)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean_total=True)

def plot_data(show_mean_total=True):
    total_minutos_trabj = data_a2['Minutos trabajados'].sum()
    plt.figure(figsize=(11, 5))
    bars = plt.bar(data_a2['Fecha_formateada'], data_a2['Minutos trabajados'], label='Minutos trabajados', color='green')

    if show_mean_total:
        media_minutos_trabj = data_a2['Minutos trabajados'].mean()
        plt.axhline(y=media_minutos_trabj, color='blue', linestyle='--', label=f'Media ({int(media_minutos_trabj)})')

    plt.xlabel('Fechas')
    plt.ylabel('Minutos')
    plt.title(f'Minutos trabajados - Actividad 2 (Total: {total_minutos_trabj})', pad=20)
    plt.xticks(rotation=45)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean_total=True)

def plot_data(show_mean_total=True):
    total_minutos_trabj = data_a3['Minutos trabajados'].sum()
    plt.figure(figsize=(11, 5))
    bars = plt.bar(data_a3['Fecha_formateada'], data_a3['Minutos trabajados'], label='Minutos trabajados', color='green')

    if show_mean_total:
        media_minutos_trabj = data_a3['Minutos trabajados'].mean()
        plt.axhline(y=media_minutos_trabj, color='blue', linestyle='--', label=f'Media ({int(media_minutos_trabj)})')

    plt.xlabel('Fechas')
    plt.ylabel('Minutos')
    plt.title(f'Minutos trabajados - Actividad 3 (Total: {total_minutos_trabj})', pad=20)
    plt.xticks(rotation=45)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean_total=True)

def plot_data(show_mean_total=True):
    total_minutos_trabj = data_a4['Minutos trabajados'].sum()
    plt.figure(figsize=(5, 3))
    bars = plt.bar(data_a4['Fecha_formateada'], data_a4['Minutos trabajados'], label='Minutos trabajados', color='green')

    if show_mean_total:
        media_minutos_trabj = data_a4['Minutos trabajados'].mean()
        plt.axhline(y=media_minutos_trabj, color='blue', linestyle='--', label=f'Media ({int(media_minutos_trabj)})')

    plt.xlabel('Fecha')
    plt.ylabel('Minutos')
    plt.title(f'Minutos trabajados - Actividad 4 (Total: {total_minutos_trabj})', pad=20)
    plt.xticks(rotation=45)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean_total=True)

"""**Análisis**

En cuanto a los minutos trabajados por cada actividad se obtuvo lo siguiente:

- **Actividad 1:** En la semana del 9 al 13 de octubre se trabajó un total de 477 minutos (7 horas y 57 minutos) con una media de 95 minutos (1 hora y 35 minutos) por día. Es importante destacar que esta métrica se vio afectada debido a la ausencia de trabajo el primer día.
- **Actividad 2:** En la semana del 16 al 20 de octubre se trabajó un total de 327 minutos (5 horas y 27 minutos) con una media de 65 minutos (1 hora y 5 minutos) por día. En esta semana se trabajó durante los 5 días.
- **Actividad 3:** En la semana del 23 al 27 de octubre se trabajó un total de 162 minutos (2 horas y 42 minutos) con una media de 32 minutos por día. Es importante destacar que esta métrica se vio afectada debido a la ausencia de trabajo los tres últimos días.
- **Actividad 4:** El 28 de octubre Se trabajó un total de 93 minutos (1 hora y 33 minutos) con una media de 32 minutos.

#### 2.1.6.2. Commits
A continuación, se presenta el gráfico de la cantidad de commits realizados para cada actividad. Un "commit" es una forma de guardar una versión de un trabajo y se utiliza en los sistemas de control de versiones como *Git*. En términos más sencillos, es como tomar una foto en un momento específico para volver a ella más adelante. Cada commit tiene un nombre que describe los cambios hechos, ayudando a mantener un registro de cómo ha evolucionado un proyecto con el tiempo.

También se tiene la opción de visualizar la media, la cual se puede desactivar a través del checkbox en la parte de arriba.

<br>

**Nota:** Los datos fueron extraídos del repositorio de *GitHub*, tomando la cantidad de commits realizados por día.
"""

def plot_data(show_mean_total=True):
    total_commits = data_a1['Commits'].sum()
    plt.figure(figsize=(11, 5))
    bars = plt.bar(data_a1['Fecha_formateada'], data_a1['Commits'], label='Commits realizados', color='cyan')

    if show_mean_total:
        media_commits = data_a1['Commits'].mean()
        plt.axhline(y=media_commits, color='brown', linestyle='--', label=f'Media ({int(media_commits)})')

    plt.xlabel('Fechas')
    plt.ylabel('Commits')
    plt.title(f'Commits realizados - Actividad 1 (Total: {total_commits})', pad=20)
    plt.xticks(rotation=45)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean_total=True)

def plot_data(show_mean_total=True):
    total_commits = data_a2['Commits'].sum()
    plt.figure(figsize=(11, 5))
    bars = plt.bar(data_a2['Fecha_formateada'], data_a2['Commits'], label='Commits realizados', color='cyan')

    if show_mean_total:
        media_commits = data_a2['Commits'].mean()
        plt.axhline(y=media_commits, color='brown', linestyle='--', label=f'Media ({int(media_commits)})')

    plt.xlabel('Fechas')
    plt.ylabel('Commits')
    plt.title(f'Commits realizados - Actividad 2 (Total: {total_commits})', pad=20)
    plt.xticks(rotation=45)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean_total=True)

def plot_data(show_mean_total=True):
    total_commits = data_a3['Commits'].sum()
    plt.figure(figsize=(11, 5))
    bars = plt.bar(data_a3['Fecha_formateada'], data_a3['Commits'], label='Commits realizados', color='cyan')

    if show_mean_total:
        media_commits = data_a3['Commits'].mean()
        plt.axhline(y=media_commits, color='brown', linestyle='--', label=f'Media ({int(media_commits)})')

    plt.xlabel('Fechas')
    plt.ylabel('Commits')
    plt.title(f'Commits realizados - Actividad 3 (Total: {total_commits})', pad=20)
    plt.xticks(rotation=45)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean_total=True)

def plot_data(show_mean_total=True):
    total_commits = data_a4['Commits'].sum()
    plt.figure(figsize=(5, 3))
    bars = plt.bar(data_a4['Fecha_formateada'], data_a4['Commits'], label='Commits realizados', color='cyan')

    if show_mean_total:
        media_commits = data_a4['Commits'].mean()
        plt.axhline(y=media_commits, color='brown', linestyle='--', label=f'Media ({int(media_commits)})')

    plt.xlabel('Fechas')
    plt.ylabel('Commits')
    plt.title(f'Commits realizados - Actividad 4 (Total: {total_commits})', pad=20)
    plt.xticks(rotation=45)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean_total=True)

"""#### 2.1.6.3. Porcentaje de cumpliento
A continuación, se presenta a manera de resúmen el gráfico del porcentaje de cumplimiento de la priemra parte del reto. También se tiene la opción de visualizar las medias, las cuales se pueden desactivar a través de los checkboxs en la parte de arriba.
"""

def plot_data(show_mean=True):
    porcentaje_cump_real = data_a1['Porcentaje de cumplimiento real'].mean()
    plt.figure(figsize=(14, 7))
    bars = plt.bar(data_a1['Fecha_formateada'], data_a1['Porcentaje de cumplimiento real'], label='Cumplimiento', color='olive')

    if show_mean:
        plt.axhline(y=porcentaje_cump_real, color='purple', linestyle='--', label=f'Media ({int(porcentaje_cump_real)}%)')

    plt.xlabel('Fechas')
    plt.ylabel('Cumplimiento (%)')
    plt.title('Porcentaje de cumplimiento - Actividad 1', pad=25)
    plt.xticks(rotation=45)
    plt.ylim(0, 100)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{height:.0f}%', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean=True)

def plot_data(show_mean=True):
    porcentaje_cump_real = data_a2['Porcentaje de cumplimiento real'].mean()
    plt.figure(figsize=(14, 7))
    bars = plt.bar(data_a2['Fecha_formateada'], data_a2['Porcentaje de cumplimiento real'], label='Cumplimiento', color='olive')

    if show_mean:
        plt.axhline(y=porcentaje_cump_real, color='purple', linestyle='--', label=f'Media ({int(porcentaje_cump_real)}%)')

    plt.xlabel('Fechas')
    plt.ylabel('Cumplimiento (%)')
    plt.title('Porcentaje de cumplimiento - Actividad 2', pad=25)
    plt.xticks(rotation=45)
    plt.ylim(0, 100)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{height:.0f}%', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean=True)

def plot_data(show_mean=True):
    porcentaje_cump_real = data_a3['Porcentaje de cumplimiento real'].mean()
    plt.figure(figsize=(14, 7))
    bars = plt.bar(data_a3['Fecha_formateada'], data_a3['Porcentaje de cumplimiento real'], label='Cumplimiento', color='olive')

    if show_mean:
        plt.axhline(y=porcentaje_cump_real, color='purple', linestyle='--', label=f'Media ({int(porcentaje_cump_real)}%)')

    plt.xlabel('Fechas')
    plt.ylabel('Cumplimiento (%)')
    plt.title('Porcentaje de cumplimiento - Actividad 3', pad=25)
    plt.xticks(rotation=45)
    plt.ylim(0, 100)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{height:.0f}%', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean=True)

def plot_data(show_mean=True):
    porcentaje_cump_real = data_a4['Porcentaje de cumplimiento'].mean()
    plt.figure(figsize=(5, 3))
    bars = plt.bar(data_a4['Fecha_formateada'], data_a4['Porcentaje de cumplimiento'], label='Cumplimiento', color='olive')

    if show_mean:
        plt.axhline(y=porcentaje_cump_real, color='purple', linestyle='--', label=f'Media ({int(porcentaje_cump_real)}%)')

    plt.xlabel('Fechas')
    plt.ylabel('Cumplimiento (%)')
    plt.title('Porcentaje de cumplimiento - Actividad 4', pad=25)
    plt.xticks(rotation=45)
    plt.ylim(0, 100)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{height:.0f}%', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean=True)

"""## 2.2. Caminatas
Para las caminatas se obtuvieron los siguientes resultados:

### 2.2.1 Importación de librerías
"""

import pandas as pd
import matplotlib.pyplot as plt
from ipywidgets import interact

"""### 2.2.2 Carga y lectura de datos desde GitHub
Los datos se almacenarón en formato CSV para una lectura y manipulación más eficiente.
"""

caminatas_csv = 'https://raw.githubusercontent.com/bryansbr/chart-testing/main/csv/data_caminatas.csv'
data = pd.read_csv(caminatas_csv)

"""### 2.2.3 Limpieza de datos
Aquí se realiza la limpieza de los datos, eliminando aquellos que sean nulos.
"""

data = data.dropna(subset=[
    'Fecha',
    'Pasos',
    'Minutos reales en movimiento',
    'Distancia (km)',
    'Calorias',
    'Tiempo promedio por km',
    'Porcentaje de cumplimiento real'
])

"""### 2.2.4 Formateo de fechas
Dado que las fechas se encuentran el formato *mm-dd-yyyy*, se pasan a *dd-mm* para una mejor interpretación de los gráficos.
"""

data['Fecha_formateada'] = pd.to_datetime(data['Fecha']).dt.strftime('%d-%b')

"""### 2.2.5 Visualización parcial de los datos
Para un mejor entendimiento, se presenta una visualización parcial de los datos extraídos de GitHub.
"""

data.head()

"""### 2.2.6. Gráficos
Para la realización de los gráficos, se excluyen las siguientes columnas:

- **Tiempo de actividad:** Este dato representa el tiempo que registra la aplicación *Google Fit* desde el inicio hasta el final del monitoreo. Sin embargo, esta métrica puede no ser completamente precisa, ya que el tiempo sigue avanzando incluso cuando alguien está en reposo dando dar lugar a mediciones incorrectas. En su lugar, se utiliza la columna *Minutos reales en movimiento*, que mide con mayor precisión el tiempo dedicado a la caminata. Este dato es proporcionado por la misma aplicación.

- **Porcentaje de cumplimiento:** Este dato representa el porcentaje de cumplimiento de la actividad por día. Se calcula dividiendo los valores de la columna *Minutos reales en movimiento* entre 45, que es el tiempo mínimo requerido para cumplir con la caminata. No obstante, esta métrica puede no ser completamente precisa, ya que si se supera el tiempo mínimo, comenzará a mostrar valores de cumplimiento por encima del 100%, lo que podría afectar los resultados finales. En su lugar, se utiliza la columna *Porcentaje real de cumplimiento*, que toma el valor mínimo entre el porcentaje calculado y el 100%, lo que ajusta el cumplimiento a un máximo del 100%.

#### 2.2.6.1. Pasos realizados
A continuación, se presenta el gráfico de la cantidad de pasos realizados en cada día del reto. También se tiene la opción de visualizar las medias, las cuales se pueden desactivar a través de los checkboxs en la parte de arriba.

**Nota:** Los datos fueron extraídos de la aplicación *Google Fit*.
"""

def plot_data(show_mean_total=True, show_mean_no_cero=True):
    pasos_no_cero = data[data['Pasos'] != 0]
    total_pasos = data['Pasos'].sum()
    plt.figure(figsize=(12, 6))
    bars = plt.bar(data['Fecha_formateada'], data['Pasos'], label='Pasos')

    if show_mean_total:
        media_pasos = round(data['Pasos'].mean())
        plt.axhline(y=media_pasos, color='red', linestyle='--', label=f'Media general ({int(media_pasos)})')

    if show_mean_no_cero:
        media_pasos_no_cero = round(pasos_no_cero['Pasos'].mean())
        plt.axhline(y=media_pasos_no_cero, color='green', linestyle='--', label=f'Media ajustada ({int(media_pasos_no_cero)})')

    plt.xlabel('Fechas')
    plt.ylabel('Pasos')
    plt.title(f'Pasos realizados (Total: {total_pasos})', pad=20)
    plt.xticks(rotation=45)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean_total=True, show_mean_no_cero=True)

"""**Análisis**

En cuanto a los pasos realizados, se puede notar que la media general (representada en rojo) es de **2.824 pasos**. No obstante, esta cifra no refleja de manera realista estos, ya que se ve afectada por los días en los que no se realizó ninguna caminata. Por esta razón, se ha calculado una segunda media (representada en verde) que excluye los días sin actividad. En esta, la media es de **4.562 pasos**. Finalmente, en el transcurso de los 21 días, se caminaron un total de **59.302 pasos**.

#### 2.2.6.2. Minutos en movimiento
A continuación, se presenta el gráfico de la cantidad de minutos en movimiento en cada día del reto. También se tiene la opción de visualizar las medias, las cuales se pueden desactivar a través de los checkboxs en la parte de arriba.

**Nota:** Los datos fueron extraídos de la aplicación *Google Fit*.
"""

def plot_data(show_mean_total=True, show_mean_no_cero=True):
    minutos_mov_no_cero = data[data['Minutos reales en movimiento'] != 0]
    total_minutos_mov = data['Minutos reales en movimiento'].sum()
    plt.figure(figsize=(12, 6))
    bars = plt.bar(data['Fecha_formateada'], data['Minutos reales en movimiento'], label='Minutos')

    if show_mean_total:
        minutos_reales_mov = data['Minutos reales en movimiento'].mean()
        plt.axhline(y=minutos_reales_mov, color='red', linestyle='--', label=f'Media general ({int(minutos_reales_mov)})')

    if show_mean_no_cero:
        minutos_reales_mov_no_cero = minutos_mov_no_cero['Minutos reales en movimiento'].mean()
        plt.axhline(y=minutos_reales_mov_no_cero, color='green', linestyle='--', label=f'Media ajustada ({int(minutos_reales_mov_no_cero)})')

    plt.xlabel('Fechas')
    plt.ylabel('Minutos')
    plt.title(f'Minutos en movimiento (Total: {total_minutos_mov})', pad=20)
    plt.xticks(rotation=45)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean_total=True, show_mean_no_cero=True)

"""**Análisis**

En cuanto a los minutos en movimiento, se puede notar que la media general (representada en rojo) es de **28 minutos**. No obstante, esta cifra no refleja de manera realista estos, ya que se ve afectada por los días en los que no se realizó ninguna caminata. Por esta razón, se ha calculado una segunda media (representada en verde) que excluye los días sin actividad. En esta, la media es de **45 minutos**. Finalmente, en el transcurso de los 21 días, se estuvo durante **591 minutos**, equivalente también a **9,85 horas** en movimiento.

#### 2.2.6.3. Distancia recorrida
A continuación, se presenta el gráfico de la distancia recorrida en cada día del reto. También se tiene la opción de visualizar las medias, las cuales se pueden desactivar a través de los checkboxs en la parte de arriba.

**Nota:** Los datos fueron extraídos de la aplicación *Google Fit*.
"""

def plot_data(show_mean_total=True, show_mean_no_cero=True):
    distancia_km_no_cero = data[data['Distancia (km)'] != 0]
    total_distancia_km = round(data['Distancia (km)'].sum(), 1)
    plt.figure(figsize=(12, 6))
    bars = plt.bar(data['Fecha_formateada'], data['Distancia (km)'], label='Distancia')

    if show_mean_total:
        distancia_km = round(data['Distancia (km)'].mean())
        plt.axhline(y=distancia_km, color='red', linestyle='--', label=f'Media general ({int(distancia_km)})')

    if show_mean_no_cero:
        distancia_km_no_cero = round(distancia_km_no_cero['Distancia (km)'].mean())
        plt.axhline(y=distancia_km_no_cero, color='green', linestyle='--', label=f'Media ajustada ({int(distancia_km_no_cero)})')

    plt.xlabel('Fechas')
    plt.ylabel('Distancia (km)')
    plt.title(f'Distancia recorrida (por día) - Total: {total_distancia_km} km', pad=20)
    plt.xticks(rotation=45)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean_total=True, show_mean_no_cero=True)

"""**Análisis**

En cuanto a la distancia recorrida, se puede notar que la media general (representada en rojo) es de **2 kilómetros** por día. No obstante, esta cifra no refleja de manera realista esta, ya que se ve afectada por los días en los que no se realizó ninguna caminata. Por esta razón, se ha calculado una segunda media (representada en verde) que excluye los días sin actividad. En esta, la media es de **3 kilómetros** por día. Finalmente, en el transcurso de los 21 días, se recorrieron **43,8 kilometros**.

#### 2.2.6.4. Calorías quemadas
A continuación, se presenta el gráfico de las calorías quemadas en cada día del reto. También se tiene la opción de visualizar las medias, las cuales se pueden desactivar a través de los checkboxs en la parte de arriba.

**Nota:** Los datos fueron extraídos de la aplicación *Google Fit*.
"""

def plot_data(show_mean_total=True, show_mean_no_cero=True):
    calorias_no_cero = data[data['Calorias'] != 0]
    total_calorias = round(data['Calorias'].sum(), 0)
    plt.figure(figsize=(12, 6))
    bars = plt.bar(data['Fecha_formateada'], data['Calorias'], label='Calorías')

    if show_mean_total:
        calorias = round(data['Calorias'].mean())
        plt.axhline(y=calorias, color='red', linestyle='--', label=f'Media general ({int(calorias)})')

    if show_mean_no_cero:
        calorias_no_cero = round(calorias_no_cero['Calorias'].mean())
        plt.axhline(y=calorias_no_cero, color='green', linestyle='--', label=f'Media ajustada ({int(calorias_no_cero)})')

    plt.xlabel('Fechas')
    plt.ylabel('Calorías')
    plt.title(f'Calorías quemadas (Total: {total_calorias:.1f})', pad=20)
    plt.xticks(rotation=45)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean_total=True, show_mean_no_cero=True)

"""**Análisis**

En cuanto a las calorías quemadas, se puede notar que la media general (representada en rojo) es de **268 calorías**. No obstante, esta cifra no refleja de manera realista estas, ya que se ve afectada por los días en los que no se realizó ninguna caminata. Por esta razón, se ha calculado una segunda media (representada en verde) que excluye los días sin actividad. En esta, la media es de **433 calorías**. Finalmente, en el transcurso de los 21 días, se quemaron **5264 calorías**.

#### 2.2.6.5. Tiempo promedio por kilómetro
A continuación, se presenta el gráfico de tiempo promedio por kilómetro recorrido en cada día del reto. También se tiene la opción de visualizar las medias, las cuales se pueden desactivar a través de los checkboxs en la parte de arriba.

**Nota:** Los datos fueron extraídos de la aplicación *Google Fit*.
"""

def plot_data(show_mean_general=True, show_mean_real=True):
    tiempo_prom_km_no_cero = data[data['Tiempo promedio por km'] != 0]
    plt.figure(figsize=(12, 6))
    bars = plt.bar(data['Fecha_formateada'], data['Tiempo promedio por km'], label='Tiempo (min)')

    if show_mean_general:
        tiempo_prom_km = round(data['Tiempo promedio por km'].mean())
        plt.axhline(y=tiempo_prom_km, color='red', linestyle='--', label=f'Media general ({int(tiempo_prom_km)})')

    if show_mean_real:
        tiempo_prom_km_no_cero = round(tiempo_prom_km_no_cero['Tiempo promedio por km'].mean())
        plt.axhline(y=tiempo_prom_km_no_cero, color='green', linestyle='--', label=f'Media ajustada ({int(tiempo_prom_km_no_cero)})')

    plt.xlabel('Fechas')
    plt.ylabel('Tiempo (min)')
    plt.title('Tiempo promedio por kilómetro', pad=20)
    plt.xticks(rotation=45)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean_general=True, show_mean_real=True)

"""**Análisis:**

En cuanto al tiempo promedio por cada kilómetro, se puede notar que la media general (representada en rojo) es de **10 minutos**. No obstante, esta cifra no refleja de manera realista este, ya que se ve afectada por los días en los que no se realizó ninguna caminata. Por esta razón, se ha calculado una segunda media (representada en verde) que excluye los días sin actividad. En esta, la media es de **16 minutos**.

#### 2.2.6.6. Porcentaje de cumpliento
A continuación, se presenta a manera de resúmen el gráfico del porcentaje de cumplimiento de la segunda parte del reto. También se tiene la opción de visualizar las medias, las cuales se pueden desactivar a través de los checkboxs en la parte de arriba.
"""

def plot_data(show_mean=True):
    porcentaje_cump_real = data['Porcentaje de cumplimiento real'].mean()
    plt.figure(figsize=(14, 7))
    bars = plt.bar(data['Fecha_formateada'], data['Porcentaje de cumplimiento real'], label='Cumplimiento')

    if show_mean:
        plt.axhline(y=porcentaje_cump_real, color='green', linestyle='--', label=f'Media ({int(porcentaje_cump_real)}%)')

    plt.xlabel('Fechas')
    plt.ylabel('Cumplimiento (%)')
    plt.title('Porcentaje de cumplimiento', pad=25)
    plt.xticks(rotation=45)
    plt.ylim(0, 100)
    plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1.15))
    plt.grid(True)

    for bar in bars:
        height = bar.get_height()
        plt.annotate(f'{height:.0f}%', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords='offset points', ha='center', va='bottom')

    plt.show()

interact(plot_data, show_mean=True)

"""**Análisis**

En cuanto al porcentaje de cumplimiento de la segunda parte del reto, se puede notar que la media (representada en verde) es de **59%**. A diferencia de ocasiones anteriores, aquí no se incluye otra media.

El balance general es que de los 21 días se caminó realmente en 13. Esto debido a los siguientes factores:

- Los días 12, 14, 15 y 16 de octubre no quise salir por decisión propia, principalmente debido a desmotivación y/o agotamiento.
- Los días 20 y 21 de octubre estuve fuera de casa.
- El día 28 de octubre estuve realizando los ajustes finales del documento del anteproyecto en la tarde y en la noche salí.
- El día 29 de octubre oficié como jurado de votación en Cali y termine sobre las 8 p.m. Llegué a mi casa sobre las 10 p.m. y no quise salir.

Por lo tanto, el porcentaje real de cumplimiento de esta segunda parte del reto fue del **59%**.
"""

# Creación de índice numérico para las fechas
#data['Fecha_index'] = range(len(data))

# Limpia y convierte la columna "Porcentajes" a valores numéricos
#data['Porcentaje de cumplimiento real'] = data['Porcentaje de cumplimiento real'].str.rstrip('%').astype(float) / 100

# Cálculo de medias
#media_pasos = data['Pasos'].mean()
#minutos_reales_mov = data['Minutos reales en movimiento'].mean()
#distancia_km = data['Distancia (km)'].mean()
#calorias = data['Calorias'].mean()
#tiempo_prom_km = data['Tiempo promedio por km'].mean()
#porcentaje_cump_real = data['Porcentaje de cumplimiento real'].mean()

# Calcular la línea de tendencia
# x = range(len(data))
# y = data['Pasos']
# coeff = np.polyfit(x, y, 1)
# trendline = np.poly1d(coeff)